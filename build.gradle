buildscript {
    ext.kotlinVersion = '2.0.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.17.3'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

intellij {
    version = '2024.1.1'
    plugins = ['Kotlin', 'java']
    pluginName = 'kotlin-fill-class'
    updateSinceUntilBuild = false
    publishPlugin {
        token = System.getenv('TOKEN')
    }
    patchPluginXml {
        sinceBuild = '241.14494.240'
    }
}

group 'com.github.suusan2go.kotlin-fill-class'
version '1.0.23'

repositories {
    mavenCentral()
    maven { url 'https://cache-redirector.jetbrains.com/maven.pkg.jetbrains.space/kotlin/p/kotlin/kotlin-ide-plugin-dependencies' }
}

configurations {
    ktlint
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compileOnly 'org.jetbrains.kotlin:high-level-api-for-ide:2.0.0-ij241-276', {
        exclude group: 'org.jetbrains.kotlin', module: 'analysis-api'
    }
    compileOnly 'org.jetbrains.kotlin:high-level-api-fir-for-ide:2.0.0-ij241-276', {
        exclude group: 'org.jetbrains.kotlin', module: 'analysis-api-fir'
    }
    compileOnly 'org.jetbrains.kotlin:high-level-api-fe10-for-ide:2.0.0-ij241-276', {
        exclude group: 'org.jetbrains.kotlin', module: 'analysis-api-fe10'
    }

    // Lorem : An extremely useful Lorem Ipsum generator for Java!
    implementation 'com.thedeanda:lorem:2.1'

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'io.mockk:mockk:1.13.4'

    ktlint('com.pinterest:ktlint:0.48.2') {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // to add a baseline to check against prepend following args:
    // "--baseline=ktlint-baseline.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "-F", "src/**/*.kt"
}

tasks {
    runIde {
        systemProperty("idea.kotlin.plugin.use.k2", true)
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.add("-Xcontext-receivers")
    }
    compilerOptions {
        apiVersion = org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_0
    }
}